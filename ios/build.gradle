sourceSets.main.java.srcDirs = [ "src/" ]

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext {
	mainClassName = "ArtistMatch.IOSLauncher"
}

// Extracts native libs (*.a) from the native-ios.jar and places them
// under build/libs/ios/.
task copyNatives << {
  file("build/libs/ios/").mkdirs();
  configurations.natives.files.each { jar ->
    def outputDir = null
    if (jar.name.endsWith("natives-ios.jar")) outputDir = file("build/libs/ios")
    if (outputDir != null) {
      copy {
        from zipTree(jar)
        into outputDir
        include "*.a"
      }
    }
  }
}

// Updates a robovm.xml file.
task updateRoboVMXML << {
  def xml = file('robovm.xml')

  if (!xml.exists()) {
    return
  }
  
  // Find all native (*.a) libraries beneath libs
  def libtree = fileTree(dir: 'build/libs', include: '**/*.a')
  
  def config = new groovy.util.XmlParser().parse(xml)
  config.libs.each {libs ->
      libs.children().clear()
      libtree.each { File file ->
          libs.appendNode('lib', 'build/libs/ios/' + file.getName())
      }
  }
  
  def writer = new FileWriter(xml)
  def printer = new XmlNodePrinter(new PrintWriter(writer))
  printer.setPreserveWhitespace true
  printer.print(config)
}

updateRoboVMXML.dependsOn copyNatives
build.dependsOn updateRoboVMXML
tasks.eclipse.dependsOn updateRoboVMXML

launchIPhoneSimulator.dependsOn build
launchIPadSimulator.dependsOn build
launchIOSDevice.dependsOn build
createIPA.dependsOn build


eclipse.project {
    name = appName + "-ios"
    natures 'org.robovm.eclipse.RoboVMNature'
}

// Added to the build file to use roboVM


group = 'com.mobidevelop.robovm'
version = '2.3.3'

ext {
                                            roboVMVersion = '2.3.3'
}

// Pull the plugin from Maven Central
buildscript {
    project.ext.roboVMVersion = "2.3.3"
    project.ext.roboVMGradleVersion = "2.3.3"

    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath group: 'com.mobidevelop.robovm', name: 'robovm-gradle-plugin', version: project.roboVMGradleVersion
        //classpath group: 'org.robovm', name: 'robovm-gradle-plugin', version: project.roboVMGradleVersion
        
    }
}

// Apply the plugin
apply plugin: 'robovm'
apply plugin: 'maven'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    compile group: 'com.mobidevelop.robovm', name: 'robovm-rt', version: project.roboVMVersion
    compile group: 'com.mobidevelop.robovm', name: 'robovm-cocoatouch', version: project.roboVMVersion
    compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
    
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    compile "org.apache.commons:commons-compress:1.5"
    compile "com.mobidevelop.robovm:robovm-dist-compiler:${roboVMVersion}"
    compile 'org.sonatype.aether:aether:1.13.1'
    compile 'org.sonatype.aether:aether-connector-wagon:1.13.1'
    compile 'org.apache.maven:maven-aether-provider:3.0.4'
    compile 'org.apache.maven.wagon:wagon-provider-api:2.4'
    compile 'org.apache.maven.wagon:wagon-http:2.4'
   	compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
    
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

robovm {
    // Configure robovm
}


project(":ios") {
	apply plugin: "java"
	apply plugin: "robovm"

	eclipse{
		project{
			name = "Artist Match-ios"
		}
	}
	dependencies {
		compile project(":core")
		compile "org.robovm:robovm-rt:$roboVMVersion"
		compile "org.robovm:robovm-cocoatouch:$roboVMVersion"
		compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
		compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
		compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
		compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
	}
}



